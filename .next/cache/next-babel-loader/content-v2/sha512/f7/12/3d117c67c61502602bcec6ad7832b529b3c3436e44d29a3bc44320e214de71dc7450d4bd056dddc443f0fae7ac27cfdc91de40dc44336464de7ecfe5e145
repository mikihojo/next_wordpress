{"ast":null,"code":"const API_URL = process.env.WORDPRESS_API_URL;\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  if (process.env.WORDPRESS_AUTH_REFRESH_TOKEN) {\n    headers['Authorization'] = `Bearer ${process.env.WORDPRESS_AUTH_REFRESH_TOKEN}`;\n  }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(`\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\n      post(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`, {\n    variables: {\n      id,\n      idType\n    }\n  });\n  return data.post;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      posts(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.posts;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    query AllPosts {\n      posts(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            excerpt\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      onlyEnabled: !preview,\n      preview\n    }\n  });\n  return data === null || data === void 0 ? void 0 : data.posts;\n}\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  const postPreview = preview && (previewData === null || previewData === void 0 ? void 0 : previewData.post); // The slug may be the id of an unpublished post\n\n  const isId = Number.isInteger(Number(slug));\n  const isSamePost = isId ? Number(slug) === postPreview.id : slug === postPreview.slug;\n  const isDraft = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'draft';\n  const isRevision = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'publish';\n  const data = await fetchAPI(`\n    fragment AuthorFields on User {\n      name\n      firstName\n      lastName\n      avatar {\n        url\n      }\n    }\n    fragment PostFields on Post {\n      title\n      excerpt\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n      author {\n        node {\n          ...AuthorFields\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PostIdType!) {\n      post(id: $id, idType: $idType) {\n        ...PostFields\n        content\n        ${// Only some of the fields of a revision are considered as there are some inconsistencies\n  isRevision ? `\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\n          edges {\n            node {\n              title\n              excerpt\n              content\n              author {\n                node {\n                  ...AuthorFields\n                }\n              }\n            }\n          }\n        }\n        ` : ''}\n      }\n      posts(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            ...PostFields\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      id: isDraft ? postPreview.id : slug,\n      idType: isDraft ? 'DATABASE_ID' : 'SLUG'\n    }\n  }); // Draft posts may not have an slug\n\n  if (isDraft) data.post.slug = postPreview.id; // Apply a revision (changes in a published post)\n\n  if (isRevision && data.post.revisions) {\n    var _data$post$revisions$;\n\n    const revision = (_data$post$revisions$ = data.post.revisions.edges[0]) === null || _data$post$revisions$ === void 0 ? void 0 : _data$post$revisions$.node;\n    if (revision) Object.assign(data.post, revision);\n    delete data.post.revisions;\n  } // Filter out the main post\n\n\n  data.posts.edges = data.posts.edges.filter(({\n    node\n  }) => node.slug !== slug); // If there are still 3 posts, remove the last one\n\n  if (data.posts.edges.length > 2) data.posts.edges.pop();\n  return data;\n}","map":{"version":3,"sources":["/home/vagrant/next_dir/cms-wordpress-app/lib/api.js"],"names":["API_URL","process","env","WORDPRESS_API_URL","fetchAPI","query","variables","headers","WORDPRESS_AUTH_REFRESH_TOKEN","res","fetch","method","body","JSON","stringify","json","errors","console","error","Error","data","getPreviewPost","id","idType","post","getAllPostsWithSlug","posts","getAllPostsForHome","preview","onlyEnabled","getPostAndMorePosts","slug","previewData","postPreview","isId","Number","isInteger","isSamePost","isDraft","status","isRevision","revisions","revision","edges","node","Object","assign","filter","length","pop"],"mappings":"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","sourcesContent":["const API_URL = process.env.WORDPRESS_API_URL\n\nasync function fetchAPI(query, { variables } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  if (process.env.WORDPRESS_AUTH_REFRESH_TOKEN) {\n    headers[\n      'Authorization'\n    ] = `Bearer ${process.env.WORDPRESS_AUTH_REFRESH_TOKEN}`\n  }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n  return json.data\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(\n    `\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\n      post(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`,\n    {\n      variables: { id, idType },\n    }\n  )\n  return data.post\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      posts(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  return data?.posts\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    query AllPosts {\n      posts(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            excerpt\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        onlyEnabled: !preview,\n        preview,\n      },\n    }\n  )\n\n  return data?.posts\n}\n\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  const postPreview = preview && previewData?.post\n  // The slug may be the id of an unpublished post\n  const isId = Number.isInteger(Number(slug))\n  const isSamePost = isId\n    ? Number(slug) === postPreview.id\n    : slug === postPreview.slug\n  const isDraft = isSamePost && postPreview?.status === 'draft'\n  const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(\n    `\n    fragment AuthorFields on User {\n      name\n      firstName\n      lastName\n      avatar {\n        url\n      }\n    }\n    fragment PostFields on Post {\n      title\n      excerpt\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n      author {\n        node {\n          ...AuthorFields\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PostIdType!) {\n      post(id: $id, idType: $idType) {\n        ...PostFields\n        content\n        ${\n          // Only some of the fields of a revision are considered as there are some inconsistencies\n          isRevision\n            ? `\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\n          edges {\n            node {\n              title\n              excerpt\n              content\n              author {\n                node {\n                  ...AuthorFields\n                }\n              }\n            }\n          }\n        }\n        `\n            : ''\n        }\n      }\n      posts(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            ...PostFields\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        id: isDraft ? postPreview.id : slug,\n        idType: isDraft ? 'DATABASE_ID' : 'SLUG',\n      },\n    }\n  )\n\n  // Draft posts may not have an slug\n  if (isDraft) data.post.slug = postPreview.id\n  // Apply a revision (changes in a published post)\n  if (isRevision && data.post.revisions) {\n    const revision = data.post.revisions.edges[0]?.node\n\n    if (revision) Object.assign(data.post, revision)\n    delete data.post.revisions\n  }\n\n  // Filter out the main post\n  data.posts.edges = data.posts.edges.filter(({ node }) => node.slug !== slug)\n  // If there are still 3 posts, remove the last one\n  if (data.posts.edges.length > 2) data.posts.edges.pop()\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}